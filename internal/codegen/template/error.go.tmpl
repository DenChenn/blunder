// Code generated by github.com/DenChenn/blunder. DO NOT EDIT.

package {{ .Package }}

type {{ .Package }} struct {
  Id             string `json:"id"`
	HttpStatusCode int    `json:"http_status_code"`
	GrpcStatusCode int    `json:"grpc_status_code"`
	ErrorCode      string `json:"error_code"`
	Message        string `json:"message"`
	Err            error  `json:"err"`
}

var (
  {{- range .Errors }}
	{{ .Code }} = &{{ $.Package }}{
	  Id:             "{{ .Id }}",
		HttpStatusCode: {{ .HttpStatusCode }},
		GrpcStatusCode: {{ .GrpcStatusCode }},
		ErrorCode:      "{{ .Code }}",
		Message:        "{{ .Message }}",
	}
	{{- end }}
)

var (
  {{- range .Errors }}
	_ error = {{ .Code }}
	{{- end }}
)

func (e *{{ .Package }}) Error() string {
	return e.Message
}

func (e *{{ .Package }}) GetId() string {
  return e.Id
}

func (e *{{ .Package }}) GetHttpStatusCode() int {
	return e.HttpStatusCode
}

func (e *{{ .Package }}) GetGrpcStatusCode() int {
	return e.GrpcStatusCode
}

func (e *{{ .Package }}) GetErrorCode() string {
	return e.ErrorCode
}

func (e *{{ .Package }}) GetMessage() string {
	return e.Message
}

func (e *{{ .Package }}) Wrap(err error) {
	e.Err = err
}

func (e *{{ .Package }}) Unwrap() error {
	return e.Err
}

func (e *{{ .Package }}) Is(err error) bool {
  typedErr, ok := err.(*{{ .Package }})
  if ok {
    return typedErr.GetId() == e.GetId()
  }
  return false
}
